{"ast":null,"code":"import { CoreError, CoreErrorCode, BigNumber, CoreProvider, Module, MoralisApiError, ApiErrorCode } from '@moralisweb3/common-core';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\n\n/**\r\n * Copied (and remove obsolete functionalities) from https://github.com/solana-labs/solana-web3.js/blob/master/src/publickey.ts because\r\n * - We only care about address validation and conversion\r\n * - Resolving this dependency in UMD gives dependency errors\r\n */\n/**\r\n * Size of public key in bytes\r\n */\nvar PUBLIC_KEY_LENGTH = 32;\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\nvar PublicKey = /** @class */function () {\n  /**\r\n   * Create a new PublicKey object\r\n   * @param value ed25519 public key as buffer or base-58 encoded string\r\n   */\n  function PublicKey(value) {\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        var decoded = bs58.decode(value);\n        if (decoded.length !== PUBLIC_KEY_LENGTH) {\n          throw new Error(\"Invalid public key input\");\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n      if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\n        throw new Error(\"Invalid public key input\");\n      }\n    }\n  }\n  /**\r\n   * Return the base-58 representation of the public key\r\n   */\n  PublicKey.prototype.toBase58 = function () {\n    return bs58.encode(this.toBytes());\n  };\n  /**\r\n   * Return the byte array representation of the public key in big endian\r\n   */\n  PublicKey.prototype.toBytes = function () {\n    var buf = this.toBuffer();\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  };\n  /**\r\n   * Return the Buffer representation of the public key in big endian\r\n   */\n  PublicKey.prototype.toBuffer = function () {\n    var b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n    var zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  };\n  Object.defineProperty(PublicKey.prototype, Symbol.toStringTag, {\n    get: function () {\n      return \"PublicKey(\".concat(this.toString(), \")\");\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Return the base-58 representation of the public key\r\n   */\n  PublicKey.prototype.toString = function () {\n    return this.toBase58();\n  };\n  return PublicKey;\n}();\n\n/**\r\n * A representation of an address on the Solana network.\r\n *\r\n * Use this class any time you work with an address.\r\n *\r\n * @category DataType\r\n */\nvar SolAddress = /** @class */function () {\n  function SolAddress(address) {\n    this.address = address;\n  }\n  /**\r\n   * Create a new instance of SolAddress from any valid address input.\r\n   *\r\n   * @example `const address = SolAddress.create(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\")`\r\n   * @throws an error when a passed address is invalid.\r\n   */\n  SolAddress.create = function (address) {\n    return address instanceof SolAddress ? address : new SolAddress(SolAddress.parse(address));\n  };\n  SolAddress.fromJSON = function (address) {\n    return SolAddress.create(address);\n  };\n  SolAddress.parse = function (address) {\n    try {\n      var publicKey = new PublicKey(address);\n      return publicKey.toBase58();\n    } catch (e) {\n      throw new CoreError({\n        code: CoreErrorCode.INVALID_ARGUMENT,\n        message: \"Invalid Solana address provided: \".concat(address),\n        cause: e\n      });\n    }\n  };\n  /**\r\n   * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n   */\n  SolAddress.prototype.format = function () {\n    return this.address;\n  };\n  /**\r\n   * Checks the equality of the current address with another Solana address.\r\n   * @example `address.equals(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\")`\r\n   * @example `address.equals(SolAddress.create(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"))`\r\n   */\n  SolAddress.prototype.equals = function (address) {\n    return this.address === SolAddress.create(address).address;\n  };\n  /**\r\n   * @returns a string representing the address.\r\n   * @example address.toString(); // \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\r\n   */\n  SolAddress.prototype.toString = function () {\n    return this.address;\n  };\n  /**\r\n   * @returns a string representing the address.\r\n   * @example address.toJSON(); // \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\r\n   */\n  SolAddress.prototype.toJSON = function () {\n    return this.address;\n  };\n  return SolAddress;\n}();\nvar solNetworkNames = ['mainnet', 'devnet'];\n/**\r\n * A representation of a Solana network.\r\n *\r\n * @category DataType\r\n */\nvar SolNetwork = /** @class */function () {\n  function SolNetwork(network) {\n    this.network = network;\n  }\n  Object.defineProperty(SolNetwork, \"MAINNET\", {\n    /**\r\n     * Returns MAINNET network\r\n     *\r\n     * @example SolNetwork.MAINNET\r\n     */\n    get: function () {\n      return SolNetwork.create('mainnet');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SolNetwork, \"DEVNET\", {\n    /**\r\n     * Returns DEVNET network\r\n     *\r\n     * @example SolNetwork.MAINNET\r\n     */\n    get: function () {\n      return SolNetwork.create('devnet');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Create a new instance of SolNetwork from any valid network input.\r\n   *\r\n   * @example `const network = SolNetwork.create(\"mainnet\")`\r\n   * @throws an error when a passed network is invalid.\r\n   */\n  SolNetwork.create = function (network) {\n    return network instanceof SolNetwork ? network : new SolNetwork(SolNetwork.parse(network));\n  };\n  SolNetwork.fromJSON = function (network) {\n    return SolNetwork.create(network);\n  };\n  SolNetwork.parse = function (network) {\n    if (typeof network === 'string') {\n      if (!solNetworkNames.includes(network)) {\n        throw new CoreError({\n          code: CoreErrorCode.INVALID_ARGUMENT,\n          message: \"Solana network is not supported: \".concat(network)\n        });\n      }\n    }\n    return network;\n  };\n  /**\r\n   * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n   */\n  SolNetwork.prototype.format = function () {\n    return this.network;\n  };\n  /**\r\n   * Checks the equality of the current network with another Solana network.\r\n   * @example `network.equals(\"mainnet\")`\r\n   * @example `network.equals(SolNetwork.create(\"mainnet\"))`\r\n   */\n  SolNetwork.prototype.equals = function (network) {\n    return this.network === SolNetwork.create(network).network;\n  };\n  /**\r\n   * @returns a string representing the network.\r\n   * @example network.toJSON(); // \"mainnet\"\r\n   */\n  SolNetwork.prototype.toJSON = function () {\n    return this.network;\n  };\n  /**\r\n   * @returns a string representing the network.\r\n   * @example network.toString(); // \"mainnet\"\r\n   */\n  SolNetwork.prototype.toString = function () {\n    return this.network;\n  };\n  return SolNetwork;\n}();\nvar unitToDecimals = {\n  solana: 9,\n  lamports: 0\n};\n/**\r\n * The SolNative class is a MoralisData that references to the value of Solana native currency SOL\r\n *\r\n * @category DataType\r\n */\nvar SolNative = /** @class */function () {\n  function SolNative(rawValue) {\n    this.rawValue = rawValue;\n  }\n  /**\r\n   * Create a new instance of SolNative from any valid {@link SolNativeish} value.\r\n   * @param value - the value to create the SolNative from\r\n   * @param unit - the unit of the value (optional), defaults to `solana`\r\n   * @returns a new instance of SolNative\r\n   * @example\r\n   * ```ts\r\n   * const native = SolNative.create(2, 'lamports');\r\n   * const native = SolNative.create(2);\r\n   *```\r\n   */\n  SolNative.create = function (value, unit) {\n    if (value instanceof SolNative) {\n      return value;\n    }\n    return new SolNative(SolNative.parse(value, unit));\n  };\n  SolNative.fromJSON = function (json) {\n    return SolNative.create(json, 'lamports');\n  };\n  SolNative.parse = function (value, unit) {\n    if (unit === void 0) {\n      unit = 'solana';\n    }\n    var decimal;\n    if (typeof unit === 'number') {\n      decimal = unit;\n    } else if (unitToDecimals[unit] !== undefined) {\n      decimal = unitToDecimals[unit];\n    } else {\n      throw new CoreError({\n        code: CoreErrorCode.INVALID_ARGUMENT,\n        message: \"Not supported Solana unit: \".concat(unit)\n      });\n    }\n    return BigNumber.fromDecimal(value.toString(), decimal);\n  };\n  /**\r\n   * Compares two SolNativeish values.\r\n   * @param valueA - the first value to compare\r\n   * @param valueB - the second value to compare\r\n   * @returns true if the values are equal\r\n   * @example\r\n   * ```ts\r\n   * SolNative.equals(SolNative.create(1), SolNative.create(1)); // true\r\n   * ```\r\n   */\n  SolNative.equals = function (valueA, valueB) {\n    var solNativeA = SolNative.create(valueA);\n    var solNativeB = SolNative.create(valueB);\n    return solNativeA.lamports === solNativeB.lamports;\n  };\n  /**\r\n   * Compares SolNative with current instance.\r\n   * @param value - the value to compare with\r\n   * @returns true if the values are equal\r\n   * @example\r\n   * ```ts\r\n   * const native = SolNative.create(2, 'lamports');\r\n   * native.equals(SolNative.create(1)); // false\r\n   * ```\r\n   */\n  SolNative.prototype.equals = function (value) {\n    return SolNative.equals(this, value);\n  };\n  /**\r\n   * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n   */\n  SolNative.prototype.format = function () {\n    // TODO: add `format` argument\n    return this.lamports;\n  };\n  /**\r\n   * Converts the SolNative to a string.\r\n   * @returns the value of the SolNative as a string\r\n   * @example `native.toJSON()`\r\n   */\n  SolNative.prototype.toJSON = function () {\n    return this.lamports;\n  };\n  /**\r\n   * Converts the SolNative to a string.\r\n   * @returns the value of the SolNative as a string\r\n   * @example `native.toString()`\r\n   */\n  SolNative.prototype.toString = function () {\n    return this.lamports;\n  };\n  Object.defineProperty(SolNative.prototype, \"value\", {\n    /**\r\n     * @returns the value of the SolNative as a BigNumber\r\n     * @example `native.value`\r\n     */\n    get: function () {\n      return this.rawValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SolNative.prototype, \"solana\", {\n    /**\r\n     * Converts the SolNative to a solana unit.\r\n     * @returns the value of the SolNative as a solana string\r\n     * @example `native.solana`\r\n     */\n    get: function () {\n      return this.rawValue.toDecimal(unitToDecimals['solana']);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SolNative.prototype, \"lamports\", {\n    /**\r\n     * Converts the SolNative to a string.\r\n     * @returns the value of the SolNative as a string\r\n     * @example `native.lamports`\r\n     */\n    get: function () {\n      return this.rawValue.toString();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return SolNative;\n}();\n\n// $ref: #/components/schemas/SPLNativePrice\n// type: SPLNativePrice\n// properties:\n// - value ($ref: #/components/schemas/SPLNativePrice/properties/value)\n// - decimals ($ref: #/components/schemas/SPLNativePrice/properties/decimals)\n// - name ($ref: #/components/schemas/SPLNativePrice/properties/name)\n// - symbol ($ref: #/components/schemas/SPLNativePrice/properties/symbol)\nvar SolSPLNativePrice = /** @class */function () {\n  function SolSPLNativePrice(input) {\n    this.value = input.value;\n    this.decimals = input.decimals;\n    this.name = input.name;\n    this.symbol = input.symbol;\n  }\n  SolSPLNativePrice.create = function (input) {\n    if (input instanceof SolSPLNativePrice) {\n      return input;\n    }\n    return new SolSPLNativePrice(input);\n  };\n  SolSPLNativePrice.fromJSON = function (json) {\n    var input = {\n      value: json.value,\n      decimals: json.decimals,\n      name: json.name,\n      symbol: json.symbol\n    };\n    return SolSPLNativePrice.create(input);\n  };\n  SolSPLNativePrice.prototype.toJSON = function () {\n    return {\n      value: this.value,\n      decimals: this.decimals,\n      name: this.name,\n      symbol: this.symbol\n    };\n  };\n  return SolSPLNativePrice;\n}();\nvar SolSPLTokenPrice = /** @class */function () {\n  function SolSPLTokenPrice(input) {\n    this.nativePrice = input.nativePrice ? SolSPLNativePrice.create(input.nativePrice) : undefined;\n    this.usdPrice = input.usdPrice;\n    this.exchangeAddress = input.exchangeAddress ? SolAddress.create(input.exchangeAddress) : undefined;\n    this.exchangeName = input.exchangeName;\n  }\n  SolSPLTokenPrice.create = function (input) {\n    if (input instanceof SolSPLTokenPrice) {\n      return input;\n    }\n    return new SolSPLTokenPrice(input);\n  };\n  SolSPLTokenPrice.fromJSON = function (json) {\n    var input = {\n      nativePrice: json.nativePrice ? SolSPLNativePrice.fromJSON(json.nativePrice) : undefined,\n      usdPrice: json.usdPrice,\n      exchangeAddress: json.exchangeAddress ? SolAddress.fromJSON(json.exchangeAddress) : undefined,\n      exchangeName: json.exchangeName\n    };\n    return SolSPLTokenPrice.create(input);\n  };\n  SolSPLTokenPrice.prototype.toJSON = function () {\n    return {\n      nativePrice: this.nativePrice ? this.nativePrice.toJSON() : undefined,\n      usdPrice: this.usdPrice,\n      exchangeAddress: this.exchangeAddress ? this.exchangeAddress.toJSON() : undefined,\n      exchangeName: this.exchangeName\n    };\n  };\n  return SolSPLTokenPrice;\n}();\nvar GetTokenPriceOperation = {\n  operationId: \"getTokenPrice\",\n  groupName: \"token\",\n  httpMethod: \"get\",\n  routePattern: \"/token/{network}/{address}/price\",\n  parameterNames: [\"network\", \"address\"],\n  hasResponse: true,\n  hasBody: false,\n  parseResponse: function (json) {\n    return SolSPLTokenPrice.fromJSON(json);\n  },\n  serializeRequest: function (request) {\n    var network = SolNetwork.create(request.network);\n    var address = SolAddress.create(request.address);\n    return {\n      network: network.toJSON(),\n      address: address.toJSON()\n    };\n  }\n};\n\n// $ref: #/components/schemas/MetaplexToken\n// type: MetaplexToken\n// properties:\n// - metadataUri ($ref: #/components/schemas/MetaplexToken/properties/metadataUri)\n// - masterEdition ($ref: #/components/schemas/MetaplexToken/properties/masterEdition)\n// - isMutable ($ref: #/components/schemas/MetaplexToken/properties/isMutable)\n// - primarySaleHappened ($ref: #/components/schemas/MetaplexToken/properties/primarySaleHappened)\n// - sellerFeeBasisPoints ($ref: #/components/schemas/MetaplexToken/properties/sellerFeeBasisPoints)\n// - updateAuthority ($ref: #/components/schemas/MetaplexToken/properties/updateAuthority)\nvar SolMetaplexToken = /** @class */function () {\n  function SolMetaplexToken(input) {\n    this.metadataUri = input.metadataUri;\n    this.masterEdition = input.masterEdition;\n    this.isMutable = input.isMutable;\n    this.primarySaleHappened = input.primarySaleHappened;\n    this.sellerFeeBasisPoints = input.sellerFeeBasisPoints;\n    this.updateAuthority = input.updateAuthority;\n  }\n  SolMetaplexToken.create = function (input) {\n    if (input instanceof SolMetaplexToken) {\n      return input;\n    }\n    return new SolMetaplexToken(input);\n  };\n  SolMetaplexToken.fromJSON = function (json) {\n    var input = {\n      metadataUri: json.metadataUri,\n      masterEdition: json.masterEdition,\n      isMutable: json.isMutable,\n      primarySaleHappened: json.primarySaleHappened,\n      sellerFeeBasisPoints: json.sellerFeeBasisPoints,\n      updateAuthority: json.updateAuthority\n    };\n    return SolMetaplexToken.create(input);\n  };\n  SolMetaplexToken.prototype.toJSON = function () {\n    return {\n      metadataUri: this.metadataUri,\n      masterEdition: this.masterEdition,\n      isMutable: this.isMutable,\n      primarySaleHappened: this.primarySaleHappened,\n      sellerFeeBasisPoints: this.sellerFeeBasisPoints,\n      updateAuthority: this.updateAuthority\n    };\n  };\n  return SolMetaplexToken;\n}();\nvar SolTokenMetadata = /** @class */function () {\n  function SolTokenMetadata(input) {\n    this.mint = input.mint;\n    this.standard = input.standard;\n    this.name = input.name;\n    this.symbol = input.symbol;\n    this.metaplex = SolMetaplexToken.create(input.metaplex);\n  }\n  SolTokenMetadata.create = function (input) {\n    if (input instanceof SolTokenMetadata) {\n      return input;\n    }\n    return new SolTokenMetadata(input);\n  };\n  SolTokenMetadata.fromJSON = function (json) {\n    var input = {\n      mint: json.mint,\n      standard: json.standard,\n      name: json.name,\n      symbol: json.symbol,\n      metaplex: SolMetaplexToken.fromJSON(json.metaplex)\n    };\n    return SolTokenMetadata.create(input);\n  };\n  SolTokenMetadata.prototype.toJSON = function () {\n    return {\n      mint: this.mint,\n      standard: this.standard,\n      name: this.name,\n      symbol: this.symbol,\n      metaplex: this.metaplex.toJSON()\n    };\n  };\n  return SolTokenMetadata;\n}();\nvar GetTokenMetadataOperation = {\n  operationId: \"getTokenMetadata\",\n  groupName: \"token\",\n  httpMethod: \"get\",\n  routePattern: \"/token/{network}/{address}/metadata\",\n  parameterNames: [\"network\", \"address\"],\n  hasResponse: true,\n  hasBody: false,\n  parseResponse: function (json) {\n    return SolTokenMetadata.fromJSON(json);\n  },\n  serializeRequest: function (request) {\n    var network = SolNetwork.create(request.network);\n    var address = SolAddress.create(request.address);\n    return {\n      network: network.toJSON(),\n      address: address.toJSON()\n    };\n  }\n};\nvar operations = [GetTokenPriceOperation, GetTokenMetadataOperation];\n\n// $ref: #/paths/~1token~1{network}~1{address}~1price/get/parameters/0/schema\n// typeName: getTokenPrice_network_Enum\nvar SolGetTokenPriceNetworkEnum = /** @class */function () {\n  function SolGetTokenPriceNetworkEnum() {}\n  SolGetTokenPriceNetworkEnum.create = function (input) {\n    return input;\n  };\n  SolGetTokenPriceNetworkEnum.fromJSON = function (json) {\n    return json;\n  };\n  return SolGetTokenPriceNetworkEnum;\n}();\n\n// $ref: #/paths/~1token~1{network}~1{address}~1metadata/get/parameters/0/schema\n// typeName: getTokenMetadata_network_Enum\nvar SolGetTokenMetadataNetworkEnum = /** @class */function () {\n  function SolGetTokenMetadataNetworkEnum() {}\n  SolGetTokenMetadataNetworkEnum.create = function (input) {\n    return input;\n  };\n  SolGetTokenMetadataNetworkEnum.fromJSON = function (json) {\n    return json;\n  };\n  return SolGetTokenMetadataNetworkEnum;\n}();\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n  return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() {\n    this.constructor = d;\n  }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\nvar CommonSolUtilsConfig = {\n  defaultSolNetwork: {\n    name: 'defaultSolNetwork',\n    defaultValue: 'mainnet'\n  }\n};\nvar CommonSolUtilsConfigSetup = /** @class */function () {\n  function CommonSolUtilsConfigSetup() {}\n  CommonSolUtilsConfigSetup.register = function (config) {\n    config.registerKey(CommonSolUtilsConfig.defaultSolNetwork);\n  };\n  return CommonSolUtilsConfigSetup;\n}();\nvar CommonSolUtils = /** @class */function (_super) {\n  __extends(CommonSolUtils, _super);\n  function CommonSolUtils(core) {\n    return _super.call(this, CommonSolUtils.moduleName, core) || this;\n  }\n  CommonSolUtils.create = function (core) {\n    return new CommonSolUtils(core !== null && core !== void 0 ? core : CoreProvider.getDefault());\n  };\n  CommonSolUtils.prototype.setup = function () {\n    CommonSolUtilsConfigSetup.register(this.core.config);\n  };\n  CommonSolUtils.prototype.start = function () {\n    // Nothing\n  };\n  Object.defineProperty(CommonSolUtils.prototype, \"SolAddress\", {\n    get: function () {\n      return SolAddress;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CommonSolUtils.prototype, \"SolNative\", {\n    get: function () {\n      return SolNative;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(CommonSolUtils.prototype, \"SolNetwork\", {\n    get: function () {\n      return SolNetwork;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  CommonSolUtils.moduleName = 'solUtils';\n  return CommonSolUtils;\n}(Module);\nvar SolNetworkResolver = /** @class */function () {\n  function SolNetworkResolver() {}\n  SolNetworkResolver.resolve = function (network, core) {\n    if (!network) {\n      network = core.config.get(CommonSolUtilsConfig.defaultSolNetwork);\n    }\n    return SolNetwork.create(network).network;\n  };\n  return SolNetworkResolver;\n}();\n\n/** Gets native balance owned by the given network and address */\nvar getBalanceOperation = {\n  method: 'GET',\n  name: 'getBalance',\n  id: 'balance',\n  groupName: 'account',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/account/{network}/{address}/balance',\n  getRequestUrlParams: getRequestUrlParams$5,\n  deserializeResponse: deserializeResponse$5,\n  serializeRequest: serializeRequest$5,\n  deserializeRequest: deserializeRequest$5\n};\n// Methods\nfunction getRequestUrlParams$5(request, core) {\n  return {\n    network: SolNetworkResolver.resolve(request.network, core),\n    address: SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse$5(jsonResponse) {\n  return SolNative.create(jsonResponse.lamports);\n}\nfunction serializeRequest$5(request, core) {\n  return {\n    address: SolAddress.create(request.address).address,\n    network: SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest$5(jsonRequest) {\n  return {\n    network: SolNetwork.create(jsonRequest.network),\n    address: SolAddress.create(jsonRequest.address)\n  };\n}\n\n/** Gets NFTs owned by the given network and address */\nvar getNFTsOperation = {\n  method: 'GET',\n  name: 'getNFTs',\n  id: 'getNFTs',\n  groupName: 'account',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/account/{network}/{address}/nft',\n  getRequestUrlParams: getRequestUrlParams$4,\n  deserializeResponse: deserializeResponse$4,\n  serializeRequest: serializeRequest$4,\n  deserializeRequest: deserializeRequest$4\n};\n// Methods\nfunction getRequestUrlParams$4(request, core) {\n  return {\n    network: SolNetworkResolver.resolve(request.network, core),\n    address: SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse$4(jsonResponse) {\n  return jsonResponse.map(function (item) {\n    return {\n      associatedTokenAddress: SolAddress.create(item.associatedTokenAddress),\n      mint: SolAddress.create(item.mint),\n      name: item.name,\n      symbol: item.symbol\n    };\n  });\n}\nfunction serializeRequest$4(request, core) {\n  return {\n    address: SolAddress.create(request.address).address,\n    network: SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest$4(jsonRequest) {\n  return {\n    network: SolNetwork.create(jsonRequest.network),\n    address: SolAddress.create(jsonRequest.address)\n  };\n}\n\n/** Gets the portfolio of the given network and address */\nvar getPortfolioOperation = {\n  method: 'GET',\n  name: 'getPortfolio',\n  id: 'getPortfolio',\n  groupName: 'account',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/account/{network}/{address}/portfolio',\n  getRequestUrlParams: getRequestUrlParams$3,\n  deserializeResponse: deserializeResponse$3,\n  serializeRequest: serializeRequest$3,\n  deserializeRequest: deserializeRequest$3\n};\n// Methods\nfunction getRequestUrlParams$3(request, core) {\n  return {\n    network: SolNetworkResolver.resolve(request.network, core),\n    address: SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse$3(jsonResponse) {\n  return {\n    nativeBalance: SolNative.create(jsonResponse.nativeBalance.lamports, 'lamports'),\n    nfts: jsonResponse.nfts.map(function (nft) {\n      return {\n        associatedTokenAddress: SolAddress.create(nft.associatedTokenAddress),\n        mint: SolAddress.create(nft.mint),\n        name: nft.name,\n        symbol: nft.symbol\n      };\n    }),\n    tokens: jsonResponse.tokens.map(function (token) {\n      return {\n        associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),\n        mint: SolAddress.create(token.mint),\n        amount: SolNative.create(token.amountRaw, 'lamports'),\n        name: token.name,\n        symbol: token.symbol\n      };\n    })\n  };\n}\nfunction serializeRequest$3(request, core) {\n  return {\n    address: SolAddress.create(request.address).address,\n    network: SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest$3(jsonRequest) {\n  return {\n    network: SolNetwork.create(jsonRequest.network),\n    address: SolAddress.create(jsonRequest.address)\n  };\n}\n\n/** Gets token balances owned by the given network and address */\nvar getSPLOperation = {\n  method: 'GET',\n  name: 'getSPL',\n  id: 'getSPL',\n  groupName: 'account',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/account/{network}/{address}/tokens',\n  getRequestUrlParams: getRequestUrlParams$2,\n  deserializeResponse: deserializeResponse$2,\n  serializeRequest: serializeRequest$2,\n  deserializeRequest: deserializeRequest$2\n};\n// Methods\nfunction getRequestUrlParams$2(request, core) {\n  return {\n    network: SolNetworkResolver.resolve(request.network, core),\n    address: SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse$2(jsonResponse) {\n  return jsonResponse.map(function (token) {\n    return {\n      associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),\n      mint: SolAddress.create(token.mint),\n      amount: SolNative.create(token.amountRaw, 'lamports'),\n      name: token.name,\n      symbol: token.symbol\n    };\n  });\n}\nfunction serializeRequest$2(request, core) {\n  return {\n    address: SolAddress.create(request.address).address,\n    network: SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest$2(jsonRequest) {\n  return {\n    network: SolNetwork.create(jsonRequest.network),\n    address: SolAddress.create(jsonRequest.address)\n  };\n}\n\n/** Gets the contract level metadata (mint, standard, name, symbol, metaplex) for the given network and contract */\nvar getNFTMetadataOperation = {\n  method: 'GET',\n  name: 'getNFTMetadata',\n  id: 'getNFTMetadata',\n  groupName: 'nft',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/nft/{network}/{address}/metadata',\n  getRequestUrlParams: getRequestUrlParams$1,\n  deserializeResponse: deserializeResponse$1,\n  serializeRequest: serializeRequest$1,\n  deserializeRequest: deserializeRequest$1\n};\n// Methods\nfunction getRequestUrlParams$1(request, core) {\n  return {\n    network: SolNetworkResolver.resolve(request.network, core),\n    address: SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse$1(jsonResponse) {\n  return {\n    mint: SolAddress.create(jsonResponse.mint),\n    standard: jsonResponse.standard,\n    name: jsonResponse.name,\n    symbol: jsonResponse.symbol,\n    metaplex: {\n      metadataUri: jsonResponse.metaplex.metadataUri,\n      updateAuthority: SolAddress.create(jsonResponse.metaplex.updateAuthority),\n      sellerFeeBasisPoints: jsonResponse.metaplex.sellerFeeBasisPoints,\n      primarySaleHappened: jsonResponse.metaplex.primarySaleHappened,\n      isMutable: jsonResponse.metaplex.isMutable,\n      masterEdition: jsonResponse.metaplex.masterEdition\n    }\n  };\n}\nfunction serializeRequest$1(request, core) {\n  return {\n    address: SolAddress.create(request.address).address,\n    network: SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest$1(jsonRequest) {\n  return {\n    network: SolNetwork.create(jsonRequest.network),\n    address: SolAddress.create(jsonRequest.address)\n  };\n}\n\n/** Gets the token price (usd and native) for a given contract address and network */\nvar getTokenPriceOperation = {\n  method: 'GET',\n  name: 'getTokenPrice',\n  id: 'getTokenPrice',\n  groupName: 'token',\n  urlPathParamNames: ['network', 'address'],\n  urlPathPattern: '/token/{network}/{address}/price',\n  getRequestUrlParams: getRequestUrlParams,\n  deserializeResponse: deserializeResponse,\n  serializeRequest: serializeRequest,\n  deserializeRequest: deserializeRequest\n};\n// Methods\nfunction getRequestUrlParams(request, core) {\n  var network = SolNetworkResolver.resolve(request.network, core);\n  if (network !== 'mainnet') {\n    throw new MoralisApiError({\n      message: \"Incorrct value for 'network', getTokenPrice is only available on mainnet\",\n      code: ApiErrorCode.INVALID_PARAMS\n    });\n  }\n  return {\n    network: SolNetworkResolver.resolve(request.network, core),\n    address: SolAddress.create(request.address).address\n  };\n}\nfunction deserializeResponse(jsonResponse) {\n  return SolSPLTokenPrice.fromJSON(jsonResponse);\n}\nfunction serializeRequest(request, core) {\n  return {\n    address: SolAddress.create(request.address).address,\n    network: SolNetworkResolver.resolve(request.network, core)\n  };\n}\nfunction deserializeRequest(jsonRequest) {\n  return {\n    network: SolNetwork.create(jsonRequest.network),\n    address: SolAddress.create(jsonRequest.address)\n  };\n}\nvar operationsV2 = [getBalanceOperation, getNFTsOperation, getPortfolioOperation, getSPLOperation, getNFTMetadataOperation];\n/**\r\n * @deprecated This list includes upgraded operations to the hybrid approach in the old format.\r\n */\nvar operationsV2All = __spreadArray(__spreadArray([], operationsV2, true), [getTokenPriceOperation], false);\nexport { CommonSolUtils, CommonSolUtilsConfig, CommonSolUtilsConfigSetup, GetTokenMetadataOperation, GetTokenPriceOperation, SolAddress, SolGetTokenMetadataNetworkEnum, SolGetTokenPriceNetworkEnum, SolMetaplexToken, SolNative, SolNetwork, SolNetworkResolver, SolSPLNativePrice, SolSPLTokenPrice, SolTokenMetadata, getBalanceOperation, getNFTMetadataOperation, getNFTsOperation, getPortfolioOperation, getSPLOperation, getTokenPriceOperation, operations, operationsV2, operationsV2All };","map":{"version":3,"names":["CoreError","CoreErrorCode","BigNumber","CoreProvider","Module","MoralisApiError","ApiErrorCode","BN","bs58","Buffer","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","decode","length","Error","byteLength","prototype","toBase58","encode","toBytes","buf","toBuffer","Uint8Array","buffer","byteOffset","b","toArrayLike","zeroPad","alloc","copy","Object","defineProperty","Symbol","toStringTag","get","concat","toString","enumerable","configurable","SolAddress","address","create","parse","fromJSON","publicKey","e","code","INVALID_ARGUMENT","message","cause","format","equals","toJSON","solNetworkNames","SolNetwork","network","includes","unitToDecimals","solana","lamports","SolNative","rawValue","unit","json","decimal","fromDecimal","valueA","valueB","solNativeA","solNativeB","toDecimal","SolSPLNativePrice","input","decimals","name","symbol","SolSPLTokenPrice","nativePrice","usdPrice","exchangeAddress","exchangeName","GetTokenPriceOperation","operationId","groupName","httpMethod","routePattern","parameterNames","hasResponse","hasBody","parseResponse","serializeRequest","request","SolMetaplexToken","metadataUri","masterEdition","isMutable","primarySaleHappened","sellerFeeBasisPoints","updateAuthority","SolTokenMetadata","mint","standard","metaplex","GetTokenMetadataOperation","operations","SolGetTokenPriceNetworkEnum","SolGetTokenMetadataNetworkEnum","extendStatics","d","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","__extends","TypeError","String","__","constructor","__spreadArray","to","from","pack","arguments","i","l","ar","slice","CommonSolUtilsConfig","defaultSolNetwork","defaultValue","CommonSolUtilsConfigSetup","register","config","registerKey","CommonSolUtils","_super","core","moduleName","getDefault","setup","start","SolNetworkResolver","resolve","getBalanceOperation","method","id","urlPathParamNames","urlPathPattern","getRequestUrlParams","getRequestUrlParams$5","deserializeResponse","deserializeResponse$5","serializeRequest$5","deserializeRequest","deserializeRequest$5","jsonResponse","jsonRequest","getNFTsOperation","getRequestUrlParams$4","deserializeResponse$4","serializeRequest$4","deserializeRequest$4","map","item","associatedTokenAddress","getPortfolioOperation","getRequestUrlParams$3","deserializeResponse$3","serializeRequest$3","deserializeRequest$3","nativeBalance","nfts","nft","tokens","token","amount","amountRaw","getSPLOperation","getRequestUrlParams$2","deserializeResponse$2","serializeRequest$2","deserializeRequest$2","getNFTMetadataOperation","getRequestUrlParams$1","deserializeResponse$1","serializeRequest$1","deserializeRequest$1","getTokenPriceOperation","INVALID_PARAMS","operationsV2","operationsV2All"],"sources":["C:/Users/user/Desktop/Social-Accenture/Learning-platform/node_modules/@moralisweb3/common-sol-utils/lib/esm/index.js"],"sourcesContent":["import { CoreError, CoreErrorCode, BigNumber, CoreProvider, Module, MoralisApiError, ApiErrorCode } from '@moralisweb3/common-core';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\n\n/**\r\n * Copied (and remove obsolete functionalities) from https://github.com/solana-labs/solana-web3.js/blob/master/src/publickey.ts because\r\n * - We only care about address validation and conversion\r\n * - Resolving this dependency in UMD gives dependency errors\r\n */\r\n/**\r\n * Size of public key in bytes\r\n */\r\nvar PUBLIC_KEY_LENGTH = 32;\r\nfunction isPublicKeyData(value) {\r\n    return value._bn !== undefined;\r\n}\r\nvar PublicKey = /** @class */ (function () {\r\n    /**\r\n     * Create a new PublicKey object\r\n     * @param value ed25519 public key as buffer or base-58 encoded string\r\n     */\r\n    function PublicKey(value) {\r\n        if (isPublicKeyData(value)) {\r\n            this._bn = value._bn;\r\n        }\r\n        else {\r\n            if (typeof value === 'string') {\r\n                // assume base 58 encoding by default\r\n                var decoded = bs58.decode(value);\r\n                if (decoded.length !== PUBLIC_KEY_LENGTH) {\r\n                    throw new Error(\"Invalid public key input\");\r\n                }\r\n                this._bn = new BN(decoded);\r\n            }\r\n            else {\r\n                this._bn = new BN(value);\r\n            }\r\n            if (this._bn.byteLength() > PUBLIC_KEY_LENGTH) {\r\n                throw new Error(\"Invalid public key input\");\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Return the base-58 representation of the public key\r\n     */\r\n    PublicKey.prototype.toBase58 = function () {\r\n        return bs58.encode(this.toBytes());\r\n    };\r\n    /**\r\n     * Return the byte array representation of the public key in big endian\r\n     */\r\n    PublicKey.prototype.toBytes = function () {\r\n        var buf = this.toBuffer();\r\n        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\r\n    };\r\n    /**\r\n     * Return the Buffer representation of the public key in big endian\r\n     */\r\n    PublicKey.prototype.toBuffer = function () {\r\n        var b = this._bn.toArrayLike(Buffer);\r\n        if (b.length === PUBLIC_KEY_LENGTH) {\r\n            return b;\r\n        }\r\n        var zeroPad = Buffer.alloc(32);\r\n        b.copy(zeroPad, 32 - b.length);\r\n        return zeroPad;\r\n    };\r\n    Object.defineProperty(PublicKey.prototype, Symbol.toStringTag, {\r\n        get: function () {\r\n            return \"PublicKey(\".concat(this.toString(), \")\");\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Return the base-58 representation of the public key\r\n     */\r\n    PublicKey.prototype.toString = function () {\r\n        return this.toBase58();\r\n    };\r\n    return PublicKey;\r\n}());\n\n/**\r\n * A representation of an address on the Solana network.\r\n *\r\n * Use this class any time you work with an address.\r\n *\r\n * @category DataType\r\n */\r\nvar SolAddress = /** @class */ (function () {\r\n    function SolAddress(address) {\r\n        this.address = address;\r\n    }\r\n    /**\r\n     * Create a new instance of SolAddress from any valid address input.\r\n     *\r\n     * @example `const address = SolAddress.create(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\")`\r\n     * @throws an error when a passed address is invalid.\r\n     */\r\n    SolAddress.create = function (address) {\r\n        return address instanceof SolAddress ? address : new SolAddress(SolAddress.parse(address));\r\n    };\r\n    SolAddress.fromJSON = function (address) {\r\n        return SolAddress.create(address);\r\n    };\r\n    SolAddress.parse = function (address) {\r\n        try {\r\n            var publicKey = new PublicKey(address);\r\n            return publicKey.toBase58();\r\n        }\r\n        catch (e) {\r\n            throw new CoreError({\r\n                code: CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Invalid Solana address provided: \".concat(address),\r\n                cause: e,\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    SolAddress.prototype.format = function () {\r\n        return this.address;\r\n    };\r\n    /**\r\n     * Checks the equality of the current address with another Solana address.\r\n     * @example `address.equals(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\")`\r\n     * @example `address.equals(SolAddress.create(\"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"))`\r\n     */\r\n    SolAddress.prototype.equals = function (address) {\r\n        return this.address === SolAddress.create(address).address;\r\n    };\r\n    /**\r\n     * @returns a string representing the address.\r\n     * @example address.toString(); // \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\r\n     */\r\n    SolAddress.prototype.toString = function () {\r\n        return this.address;\r\n    };\r\n    /**\r\n     * @returns a string representing the address.\r\n     * @example address.toJSON(); // \"9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM\"\r\n     */\r\n    SolAddress.prototype.toJSON = function () {\r\n        return this.address;\r\n    };\r\n    return SolAddress;\r\n}());\n\nvar solNetworkNames = ['mainnet', 'devnet'];\r\n/**\r\n * A representation of a Solana network.\r\n *\r\n * @category DataType\r\n */\r\nvar SolNetwork = /** @class */ (function () {\r\n    function SolNetwork(network) {\r\n        this.network = network;\r\n    }\r\n    Object.defineProperty(SolNetwork, \"MAINNET\", {\r\n        /**\r\n         * Returns MAINNET network\r\n         *\r\n         * @example SolNetwork.MAINNET\r\n         */\r\n        get: function () {\r\n            return SolNetwork.create('mainnet');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SolNetwork, \"DEVNET\", {\r\n        /**\r\n         * Returns DEVNET network\r\n         *\r\n         * @example SolNetwork.MAINNET\r\n         */\r\n        get: function () {\r\n            return SolNetwork.create('devnet');\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Create a new instance of SolNetwork from any valid network input.\r\n     *\r\n     * @example `const network = SolNetwork.create(\"mainnet\")`\r\n     * @throws an error when a passed network is invalid.\r\n     */\r\n    SolNetwork.create = function (network) {\r\n        return network instanceof SolNetwork ? network : new SolNetwork(SolNetwork.parse(network));\r\n    };\r\n    SolNetwork.fromJSON = function (network) {\r\n        return SolNetwork.create(network);\r\n    };\r\n    SolNetwork.parse = function (network) {\r\n        if (typeof network === 'string') {\r\n            if (!solNetworkNames.includes(network)) {\r\n                throw new CoreError({\r\n                    code: CoreErrorCode.INVALID_ARGUMENT,\r\n                    message: \"Solana network is not supported: \".concat(network),\r\n                });\r\n            }\r\n        }\r\n        return network;\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    SolNetwork.prototype.format = function () {\r\n        return this.network;\r\n    };\r\n    /**\r\n     * Checks the equality of the current network with another Solana network.\r\n     * @example `network.equals(\"mainnet\")`\r\n     * @example `network.equals(SolNetwork.create(\"mainnet\"))`\r\n     */\r\n    SolNetwork.prototype.equals = function (network) {\r\n        return this.network === SolNetwork.create(network).network;\r\n    };\r\n    /**\r\n     * @returns a string representing the network.\r\n     * @example network.toJSON(); // \"mainnet\"\r\n     */\r\n    SolNetwork.prototype.toJSON = function () {\r\n        return this.network;\r\n    };\r\n    /**\r\n     * @returns a string representing the network.\r\n     * @example network.toString(); // \"mainnet\"\r\n     */\r\n    SolNetwork.prototype.toString = function () {\r\n        return this.network;\r\n    };\r\n    return SolNetwork;\r\n}());\n\nvar unitToDecimals = {\r\n    solana: 9,\r\n    lamports: 0,\r\n};\r\n/**\r\n * The SolNative class is a MoralisData that references to the value of Solana native currency SOL\r\n *\r\n * @category DataType\r\n */\r\nvar SolNative = /** @class */ (function () {\r\n    function SolNative(rawValue) {\r\n        this.rawValue = rawValue;\r\n    }\r\n    /**\r\n     * Create a new instance of SolNative from any valid {@link SolNativeish} value.\r\n     * @param value - the value to create the SolNative from\r\n     * @param unit - the unit of the value (optional), defaults to `solana`\r\n     * @returns a new instance of SolNative\r\n     * @example\r\n     * ```ts\r\n     * const native = SolNative.create(2, 'lamports');\r\n     * const native = SolNative.create(2);\r\n     *```\r\n     */\r\n    SolNative.create = function (value, unit) {\r\n        if (value instanceof SolNative) {\r\n            return value;\r\n        }\r\n        return new SolNative(SolNative.parse(value, unit));\r\n    };\r\n    SolNative.fromJSON = function (json) {\r\n        return SolNative.create(json, 'lamports');\r\n    };\r\n    SolNative.parse = function (value, unit) {\r\n        if (unit === void 0) { unit = 'solana'; }\r\n        var decimal;\r\n        if (typeof unit === 'number') {\r\n            decimal = unit;\r\n        }\r\n        else if (unitToDecimals[unit] !== undefined) {\r\n            decimal = unitToDecimals[unit];\r\n        }\r\n        else {\r\n            throw new CoreError({\r\n                code: CoreErrorCode.INVALID_ARGUMENT,\r\n                message: \"Not supported Solana unit: \".concat(unit),\r\n            });\r\n        }\r\n        return BigNumber.fromDecimal(value.toString(), decimal);\r\n    };\r\n    /**\r\n     * Compares two SolNativeish values.\r\n     * @param valueA - the first value to compare\r\n     * @param valueB - the second value to compare\r\n     * @returns true if the values are equal\r\n     * @example\r\n     * ```ts\r\n     * SolNative.equals(SolNative.create(1), SolNative.create(1)); // true\r\n     * ```\r\n     */\r\n    SolNative.equals = function (valueA, valueB) {\r\n        var solNativeA = SolNative.create(valueA);\r\n        var solNativeB = SolNative.create(valueB);\r\n        return solNativeA.lamports === solNativeB.lamports;\r\n    };\r\n    /**\r\n     * Compares SolNative with current instance.\r\n     * @param value - the value to compare with\r\n     * @returns true if the values are equal\r\n     * @example\r\n     * ```ts\r\n     * const native = SolNative.create(2, 'lamports');\r\n     * native.equals(SolNative.create(1)); // false\r\n     * ```\r\n     */\r\n    SolNative.prototype.equals = function (value) {\r\n        return SolNative.equals(this, value);\r\n    };\r\n    /**\r\n     * @deprecated This method will be removed soon. To format the value, use one of the properties.\r\n     */\r\n    SolNative.prototype.format = function () {\r\n        // TODO: add `format` argument\r\n        return this.lamports;\r\n    };\r\n    /**\r\n     * Converts the SolNative to a string.\r\n     * @returns the value of the SolNative as a string\r\n     * @example `native.toJSON()`\r\n     */\r\n    SolNative.prototype.toJSON = function () {\r\n        return this.lamports;\r\n    };\r\n    /**\r\n     * Converts the SolNative to a string.\r\n     * @returns the value of the SolNative as a string\r\n     * @example `native.toString()`\r\n     */\r\n    SolNative.prototype.toString = function () {\r\n        return this.lamports;\r\n    };\r\n    Object.defineProperty(SolNative.prototype, \"value\", {\r\n        /**\r\n         * @returns the value of the SolNative as a BigNumber\r\n         * @example `native.value`\r\n         */\r\n        get: function () {\r\n            return this.rawValue;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SolNative.prototype, \"solana\", {\r\n        /**\r\n         * Converts the SolNative to a solana unit.\r\n         * @returns the value of the SolNative as a solana string\r\n         * @example `native.solana`\r\n         */\r\n        get: function () {\r\n            return this.rawValue.toDecimal(unitToDecimals['solana']);\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(SolNative.prototype, \"lamports\", {\r\n        /**\r\n         * Converts the SolNative to a string.\r\n         * @returns the value of the SolNative as a string\r\n         * @example `native.lamports`\r\n         */\r\n        get: function () {\r\n            return this.rawValue.toString();\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    return SolNative;\r\n}());\n\n// $ref: #/components/schemas/SPLNativePrice\r\n// type: SPLNativePrice\r\n// properties:\r\n// - value ($ref: #/components/schemas/SPLNativePrice/properties/value)\r\n// - decimals ($ref: #/components/schemas/SPLNativePrice/properties/decimals)\r\n// - name ($ref: #/components/schemas/SPLNativePrice/properties/name)\r\n// - symbol ($ref: #/components/schemas/SPLNativePrice/properties/symbol)\r\nvar SolSPLNativePrice = /** @class */ (function () {\r\n    function SolSPLNativePrice(input) {\r\n        this.value = input.value;\r\n        this.decimals = input.decimals;\r\n        this.name = input.name;\r\n        this.symbol = input.symbol;\r\n    }\r\n    SolSPLNativePrice.create = function (input) {\r\n        if (input instanceof SolSPLNativePrice) {\r\n            return input;\r\n        }\r\n        return new SolSPLNativePrice(input);\r\n    };\r\n    SolSPLNativePrice.fromJSON = function (json) {\r\n        var input = {\r\n            value: json.value,\r\n            decimals: json.decimals,\r\n            name: json.name,\r\n            symbol: json.symbol,\r\n        };\r\n        return SolSPLNativePrice.create(input);\r\n    };\r\n    SolSPLNativePrice.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value,\r\n            decimals: this.decimals,\r\n            name: this.name,\r\n            symbol: this.symbol,\r\n        };\r\n    };\r\n    return SolSPLNativePrice;\r\n}());\n\nvar SolSPLTokenPrice = /** @class */ (function () {\r\n    function SolSPLTokenPrice(input) {\r\n        this.nativePrice = input.nativePrice ? SolSPLNativePrice.create(input.nativePrice) : undefined;\r\n        this.usdPrice = input.usdPrice;\r\n        this.exchangeAddress = input.exchangeAddress ? SolAddress.create(input.exchangeAddress) : undefined;\r\n        this.exchangeName = input.exchangeName;\r\n    }\r\n    SolSPLTokenPrice.create = function (input) {\r\n        if (input instanceof SolSPLTokenPrice) {\r\n            return input;\r\n        }\r\n        return new SolSPLTokenPrice(input);\r\n    };\r\n    SolSPLTokenPrice.fromJSON = function (json) {\r\n        var input = {\r\n            nativePrice: json.nativePrice ? SolSPLNativePrice.fromJSON(json.nativePrice) : undefined,\r\n            usdPrice: json.usdPrice,\r\n            exchangeAddress: json.exchangeAddress ? SolAddress.fromJSON(json.exchangeAddress) : undefined,\r\n            exchangeName: json.exchangeName,\r\n        };\r\n        return SolSPLTokenPrice.create(input);\r\n    };\r\n    SolSPLTokenPrice.prototype.toJSON = function () {\r\n        return {\r\n            nativePrice: this.nativePrice ? this.nativePrice.toJSON() : undefined,\r\n            usdPrice: this.usdPrice,\r\n            exchangeAddress: this.exchangeAddress ? this.exchangeAddress.toJSON() : undefined,\r\n            exchangeName: this.exchangeName,\r\n        };\r\n    };\r\n    return SolSPLTokenPrice;\r\n}());\n\nvar GetTokenPriceOperation = {\r\n    operationId: \"getTokenPrice\",\r\n    groupName: \"token\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/token/{network}/{address}/price\",\r\n    parameterNames: [\"network\", \"address\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return SolSPLTokenPrice.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var network = SolNetwork.create(request.network);\r\n        var address = SolAddress.create(request.address);\r\n        return {\r\n            network: network.toJSON(),\r\n            address: address.toJSON(),\r\n        };\r\n    },\r\n};\n\n// $ref: #/components/schemas/MetaplexToken\r\n// type: MetaplexToken\r\n// properties:\r\n// - metadataUri ($ref: #/components/schemas/MetaplexToken/properties/metadataUri)\r\n// - masterEdition ($ref: #/components/schemas/MetaplexToken/properties/masterEdition)\r\n// - isMutable ($ref: #/components/schemas/MetaplexToken/properties/isMutable)\r\n// - primarySaleHappened ($ref: #/components/schemas/MetaplexToken/properties/primarySaleHappened)\r\n// - sellerFeeBasisPoints ($ref: #/components/schemas/MetaplexToken/properties/sellerFeeBasisPoints)\r\n// - updateAuthority ($ref: #/components/schemas/MetaplexToken/properties/updateAuthority)\r\nvar SolMetaplexToken = /** @class */ (function () {\r\n    function SolMetaplexToken(input) {\r\n        this.metadataUri = input.metadataUri;\r\n        this.masterEdition = input.masterEdition;\r\n        this.isMutable = input.isMutable;\r\n        this.primarySaleHappened = input.primarySaleHappened;\r\n        this.sellerFeeBasisPoints = input.sellerFeeBasisPoints;\r\n        this.updateAuthority = input.updateAuthority;\r\n    }\r\n    SolMetaplexToken.create = function (input) {\r\n        if (input instanceof SolMetaplexToken) {\r\n            return input;\r\n        }\r\n        return new SolMetaplexToken(input);\r\n    };\r\n    SolMetaplexToken.fromJSON = function (json) {\r\n        var input = {\r\n            metadataUri: json.metadataUri,\r\n            masterEdition: json.masterEdition,\r\n            isMutable: json.isMutable,\r\n            primarySaleHappened: json.primarySaleHappened,\r\n            sellerFeeBasisPoints: json.sellerFeeBasisPoints,\r\n            updateAuthority: json.updateAuthority,\r\n        };\r\n        return SolMetaplexToken.create(input);\r\n    };\r\n    SolMetaplexToken.prototype.toJSON = function () {\r\n        return {\r\n            metadataUri: this.metadataUri,\r\n            masterEdition: this.masterEdition,\r\n            isMutable: this.isMutable,\r\n            primarySaleHappened: this.primarySaleHappened,\r\n            sellerFeeBasisPoints: this.sellerFeeBasisPoints,\r\n            updateAuthority: this.updateAuthority,\r\n        };\r\n    };\r\n    return SolMetaplexToken;\r\n}());\n\nvar SolTokenMetadata = /** @class */ (function () {\r\n    function SolTokenMetadata(input) {\r\n        this.mint = input.mint;\r\n        this.standard = input.standard;\r\n        this.name = input.name;\r\n        this.symbol = input.symbol;\r\n        this.metaplex = SolMetaplexToken.create(input.metaplex);\r\n    }\r\n    SolTokenMetadata.create = function (input) {\r\n        if (input instanceof SolTokenMetadata) {\r\n            return input;\r\n        }\r\n        return new SolTokenMetadata(input);\r\n    };\r\n    SolTokenMetadata.fromJSON = function (json) {\r\n        var input = {\r\n            mint: json.mint,\r\n            standard: json.standard,\r\n            name: json.name,\r\n            symbol: json.symbol,\r\n            metaplex: SolMetaplexToken.fromJSON(json.metaplex),\r\n        };\r\n        return SolTokenMetadata.create(input);\r\n    };\r\n    SolTokenMetadata.prototype.toJSON = function () {\r\n        return {\r\n            mint: this.mint,\r\n            standard: this.standard,\r\n            name: this.name,\r\n            symbol: this.symbol,\r\n            metaplex: this.metaplex.toJSON(),\r\n        };\r\n    };\r\n    return SolTokenMetadata;\r\n}());\n\nvar GetTokenMetadataOperation = {\r\n    operationId: \"getTokenMetadata\",\r\n    groupName: \"token\",\r\n    httpMethod: \"get\",\r\n    routePattern: \"/token/{network}/{address}/metadata\",\r\n    parameterNames: [\"network\", \"address\"],\r\n    hasResponse: true,\r\n    hasBody: false,\r\n    parseResponse: function (json) {\r\n        return SolTokenMetadata.fromJSON(json);\r\n    },\r\n    serializeRequest: function (request) {\r\n        var network = SolNetwork.create(request.network);\r\n        var address = SolAddress.create(request.address);\r\n        return {\r\n            network: network.toJSON(),\r\n            address: address.toJSON(),\r\n        };\r\n    },\r\n};\n\nvar operations = [\r\n    GetTokenPriceOperation,\r\n    GetTokenMetadataOperation,\r\n];\n\n// $ref: #/paths/~1token~1{network}~1{address}~1price/get/parameters/0/schema\r\n// typeName: getTokenPrice_network_Enum\r\nvar SolGetTokenPriceNetworkEnum = /** @class */ (function () {\r\n    function SolGetTokenPriceNetworkEnum() {\r\n    }\r\n    SolGetTokenPriceNetworkEnum.create = function (input) {\r\n        return input;\r\n    };\r\n    SolGetTokenPriceNetworkEnum.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return SolGetTokenPriceNetworkEnum;\r\n}());\n\n// $ref: #/paths/~1token~1{network}~1{address}~1metadata/get/parameters/0/schema\r\n// typeName: getTokenMetadata_network_Enum\r\nvar SolGetTokenMetadataNetworkEnum = /** @class */ (function () {\r\n    function SolGetTokenMetadataNetworkEnum() {\r\n    }\r\n    SolGetTokenMetadataNetworkEnum.create = function (input) {\r\n        return input;\r\n    };\r\n    SolGetTokenMetadataNetworkEnum.fromJSON = function (json) {\r\n        return json;\r\n    };\r\n    return SolGetTokenMetadataNetworkEnum;\r\n}());\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nvar CommonSolUtilsConfig = {\r\n    defaultSolNetwork: {\r\n        name: 'defaultSolNetwork',\r\n        defaultValue: 'mainnet',\r\n    },\r\n};\n\nvar CommonSolUtilsConfigSetup = /** @class */ (function () {\r\n    function CommonSolUtilsConfigSetup() {\r\n    }\r\n    CommonSolUtilsConfigSetup.register = function (config) {\r\n        config.registerKey(CommonSolUtilsConfig.defaultSolNetwork);\r\n    };\r\n    return CommonSolUtilsConfigSetup;\r\n}());\n\nvar CommonSolUtils = /** @class */ (function (_super) {\r\n    __extends(CommonSolUtils, _super);\r\n    function CommonSolUtils(core) {\r\n        return _super.call(this, CommonSolUtils.moduleName, core) || this;\r\n    }\r\n    CommonSolUtils.create = function (core) {\r\n        return new CommonSolUtils(core !== null && core !== void 0 ? core : CoreProvider.getDefault());\r\n    };\r\n    CommonSolUtils.prototype.setup = function () {\r\n        CommonSolUtilsConfigSetup.register(this.core.config);\r\n    };\r\n    CommonSolUtils.prototype.start = function () {\r\n        // Nothing\r\n    };\r\n    Object.defineProperty(CommonSolUtils.prototype, \"SolAddress\", {\r\n        get: function () {\r\n            return SolAddress;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommonSolUtils.prototype, \"SolNative\", {\r\n        get: function () {\r\n            return SolNative;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CommonSolUtils.prototype, \"SolNetwork\", {\r\n        get: function () {\r\n            return SolNetwork;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    CommonSolUtils.moduleName = 'solUtils';\r\n    return CommonSolUtils;\r\n}(Module));\n\nvar SolNetworkResolver = /** @class */ (function () {\r\n    function SolNetworkResolver() {\r\n    }\r\n    SolNetworkResolver.resolve = function (network, core) {\r\n        if (!network) {\r\n            network = core.config.get(CommonSolUtilsConfig.defaultSolNetwork);\r\n        }\r\n        return SolNetwork.create(network).network;\r\n    };\r\n    return SolNetworkResolver;\r\n}());\n\n/** Gets native balance owned by the given network and address */\r\nvar getBalanceOperation = {\r\n    method: 'GET',\r\n    name: 'getBalance',\r\n    id: 'balance',\r\n    groupName: 'account',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/account/{network}/{address}/balance',\r\n    getRequestUrlParams: getRequestUrlParams$5,\r\n    deserializeResponse: deserializeResponse$5,\r\n    serializeRequest: serializeRequest$5,\r\n    deserializeRequest: deserializeRequest$5,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$5(request, core) {\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$5(jsonResponse) {\r\n    return SolNative.create(jsonResponse.lamports);\r\n}\r\nfunction serializeRequest$5(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest$5(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Gets NFTs owned by the given network and address */\r\nvar getNFTsOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTs',\r\n    id: 'getNFTs',\r\n    groupName: 'account',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/account/{network}/{address}/nft',\r\n    getRequestUrlParams: getRequestUrlParams$4,\r\n    deserializeResponse: deserializeResponse$4,\r\n    serializeRequest: serializeRequest$4,\r\n    deserializeRequest: deserializeRequest$4,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$4(request, core) {\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$4(jsonResponse) {\r\n    return jsonResponse.map(function (item) {\r\n        return {\r\n            associatedTokenAddress: SolAddress.create(item.associatedTokenAddress),\r\n            mint: SolAddress.create(item.mint),\r\n            name: item.name,\r\n            symbol: item.symbol,\r\n        };\r\n    });\r\n}\r\nfunction serializeRequest$4(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest$4(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Gets the portfolio of the given network and address */\r\nvar getPortfolioOperation = {\r\n    method: 'GET',\r\n    name: 'getPortfolio',\r\n    id: 'getPortfolio',\r\n    groupName: 'account',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/account/{network}/{address}/portfolio',\r\n    getRequestUrlParams: getRequestUrlParams$3,\r\n    deserializeResponse: deserializeResponse$3,\r\n    serializeRequest: serializeRequest$3,\r\n    deserializeRequest: deserializeRequest$3,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$3(request, core) {\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$3(jsonResponse) {\r\n    return {\r\n        nativeBalance: SolNative.create(jsonResponse.nativeBalance.lamports, 'lamports'),\r\n        nfts: jsonResponse.nfts.map(function (nft) {\r\n            return {\r\n                associatedTokenAddress: SolAddress.create(nft.associatedTokenAddress),\r\n                mint: SolAddress.create(nft.mint),\r\n                name: nft.name,\r\n                symbol: nft.symbol,\r\n            };\r\n        }),\r\n        tokens: jsonResponse.tokens.map(function (token) {\r\n            return {\r\n                associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),\r\n                mint: SolAddress.create(token.mint),\r\n                amount: SolNative.create(token.amountRaw, 'lamports'),\r\n                name: token.name,\r\n                symbol: token.symbol,\r\n            };\r\n        }),\r\n    };\r\n}\r\nfunction serializeRequest$3(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest$3(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Gets token balances owned by the given network and address */\r\nvar getSPLOperation = {\r\n    method: 'GET',\r\n    name: 'getSPL',\r\n    id: 'getSPL',\r\n    groupName: 'account',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/account/{network}/{address}/tokens',\r\n    getRequestUrlParams: getRequestUrlParams$2,\r\n    deserializeResponse: deserializeResponse$2,\r\n    serializeRequest: serializeRequest$2,\r\n    deserializeRequest: deserializeRequest$2,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$2(request, core) {\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$2(jsonResponse) {\r\n    return jsonResponse.map(function (token) {\r\n        return {\r\n            associatedTokenAddress: SolAddress.create(token.associatedTokenAddress),\r\n            mint: SolAddress.create(token.mint),\r\n            amount: SolNative.create(token.amountRaw, 'lamports'),\r\n            name: token.name,\r\n            symbol: token.symbol,\r\n        };\r\n    });\r\n}\r\nfunction serializeRequest$2(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest$2(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Gets the contract level metadata (mint, standard, name, symbol, metaplex) for the given network and contract */\r\nvar getNFTMetadataOperation = {\r\n    method: 'GET',\r\n    name: 'getNFTMetadata',\r\n    id: 'getNFTMetadata',\r\n    groupName: 'nft',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/nft/{network}/{address}/metadata',\r\n    getRequestUrlParams: getRequestUrlParams$1,\r\n    deserializeResponse: deserializeResponse$1,\r\n    serializeRequest: serializeRequest$1,\r\n    deserializeRequest: deserializeRequest$1,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams$1(request, core) {\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse$1(jsonResponse) {\r\n    return {\r\n        mint: SolAddress.create(jsonResponse.mint),\r\n        standard: jsonResponse.standard,\r\n        name: jsonResponse.name,\r\n        symbol: jsonResponse.symbol,\r\n        metaplex: {\r\n            metadataUri: jsonResponse.metaplex.metadataUri,\r\n            updateAuthority: SolAddress.create(jsonResponse.metaplex.updateAuthority),\r\n            sellerFeeBasisPoints: jsonResponse.metaplex.sellerFeeBasisPoints,\r\n            primarySaleHappened: jsonResponse.metaplex.primarySaleHappened,\r\n            isMutable: jsonResponse.metaplex.isMutable,\r\n            masterEdition: jsonResponse.metaplex.masterEdition,\r\n        },\r\n    };\r\n}\r\nfunction serializeRequest$1(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest$1(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\n/** Gets the token price (usd and native) for a given contract address and network */\r\nvar getTokenPriceOperation = {\r\n    method: 'GET',\r\n    name: 'getTokenPrice',\r\n    id: 'getTokenPrice',\r\n    groupName: 'token',\r\n    urlPathParamNames: ['network', 'address'],\r\n    urlPathPattern: '/token/{network}/{address}/price',\r\n    getRequestUrlParams: getRequestUrlParams,\r\n    deserializeResponse: deserializeResponse,\r\n    serializeRequest: serializeRequest,\r\n    deserializeRequest: deserializeRequest,\r\n};\r\n// Methods\r\nfunction getRequestUrlParams(request, core) {\r\n    var network = SolNetworkResolver.resolve(request.network, core);\r\n    if (network !== 'mainnet') {\r\n        throw new MoralisApiError({\r\n            message: \"Incorrct value for 'network', getTokenPrice is only available on mainnet\",\r\n            code: ApiErrorCode.INVALID_PARAMS,\r\n        });\r\n    }\r\n    return {\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n        address: SolAddress.create(request.address).address,\r\n    };\r\n}\r\nfunction deserializeResponse(jsonResponse) {\r\n    return SolSPLTokenPrice.fromJSON(jsonResponse);\r\n}\r\nfunction serializeRequest(request, core) {\r\n    return {\r\n        address: SolAddress.create(request.address).address,\r\n        network: SolNetworkResolver.resolve(request.network, core),\r\n    };\r\n}\r\nfunction deserializeRequest(jsonRequest) {\r\n    return {\r\n        network: SolNetwork.create(jsonRequest.network),\r\n        address: SolAddress.create(jsonRequest.address),\r\n    };\r\n}\n\nvar operationsV2 = [\r\n    getBalanceOperation,\r\n    getNFTsOperation,\r\n    getPortfolioOperation,\r\n    getSPLOperation,\r\n    getNFTMetadataOperation,\r\n];\r\n/**\r\n * @deprecated This list includes upgraded operations to the hybrid approach in the old format.\r\n */\r\nvar operationsV2All = __spreadArray(__spreadArray([], operationsV2, true), [getTokenPriceOperation], false);\n\nexport { CommonSolUtils, CommonSolUtilsConfig, CommonSolUtilsConfigSetup, GetTokenMetadataOperation, GetTokenPriceOperation, SolAddress, SolGetTokenMetadataNetworkEnum, SolGetTokenPriceNetworkEnum, SolMetaplexToken, SolNative, SolNetwork, SolNetworkResolver, SolSPLNativePrice, SolSPLTokenPrice, SolTokenMetadata, getBalanceOperation, getNFTMetadataOperation, getNFTsOperation, getPortfolioOperation, getSPLOperation, getTokenPriceOperation, operations, operationsV2, operationsV2All };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}